#include "C_Zakladka_Employee.h"
#include "Shop.h"

enum magazyn_prac
{
    ID_PRAC=0,
    IMIE_PRAC,
    NAZ_PRAC,
    MIAST_PRAC,
    ADRES_PRAC,
    KOLUMNY_PRAC
};

enum godziny
{
    DZIEN_PRACY=0,
    GODZINY_PIERWSZE,
    GODZINY_DRUGIE,
    KOLUMNY_GODZIN
};
const char* dni_tygodnia[7] ={
    "Poniedziałek",
    "Wtorek",
    "Środa",
    "Czwartek",
    "Piątek",
    "Sobota",
    "Niedziela"
};

const gchar* nazwy_kol_magazynu[5] ={
    "ID",
    "Imie",
    "Nazwisko",
    "Miasto zamieszkania",
    "Adres zamieszkania"
};

const gchar* dni_pracy[3] ={
    "   Dzien",
    "   10-18",
    "   13-21",
};

C_Zakladka_Employee::C_Zakladka_Employee(GtkWidget* okno_glowne_,GtkWidget* box_glowny_)
{
    this->okno_glowne = okno_glowne_;
    this->box_glowny = box_glowny_;
}
C_Zakladka_Employee::~C_Zakladka_Employee()
{

}

void C_Zakladka_Employee::build()
{
    this->scr_kontener_pracownicy = gtk_scrolled_window_new(NULL, NULL);
    g_object_ref(G_OBJECT(scr_kontener_pracownicy));

    tabela_pracownikow = gtk_tree_view_new();
    gtk_tree_view_columns_autosize(GTK_TREE_VIEW(tabela_pracownikow));
    magazyn_pracownikow = gtk_list_store_new(KOLUMNY_PRAC,G_TYPE_INT,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_INT);
    gtk_tree_view_set_model(GTK_TREE_VIEW(tabela_pracownikow), GTK_TREE_MODEL(magazyn_pracownikow));
    gtk_container_add(GTK_CONTAINER(scr_kontener_pracownicy),tabela_pracownikow);

    MYSQL *connect = mysql_init(0);
    mysql_options(connect, MYSQL_SET_CHARSET_NAME, "utf8");
    mysql_options(connect, MYSQL_INIT_COMMAND, "SET NAMES utf8");

    if((connect = mysql_real_connect(connect, "127.0.0.1","root","","sklep_ksiazek",0,NULL,0)) == NULL)
    {
    }
    else
    {
        std::string sentence = "SELECT pracownicy.ID_Pracownika,pracownicy.Imie,pracownicy.Nazwisko,adres_zamieszkania.Miejscowość,CONCAT(adres_zamieszkania.Ulica,' ',adres_zamieszkania.Nr_Domu) FROM (pracownicy INNER JOIN adres_zamieszkania ON pracownicy.ID_adresu_zamieszkania=adres_zamieszkania.ID_adresu_zamieszkania)";

        if(mysql_query(connect,sentence.c_str()))
        {
        }
        else
        {

            MYSQL_RES* idZapytania = mysql_store_result(connect);
            MYSQL_ROW row;
            GtkTreeIter iter;
            GtkTreeViewColumn *kolumna;
            GtkCellRenderer *komorka;

            while((row = mysql_fetch_row(idZapytania)) != NULL)
            {
                gtk_list_store_append(magazyn_pracownikow,&iter);
                gtk_list_store_set(magazyn_pracownikow, &iter,ID_PRAC,(gint) atoi(row[0]),IMIE_PRAC,row[1],NAZ_PRAC,row[2],
                MIAST_PRAC,row[3],ADRES_PRAC,row[4], - 1 );
            }
            for(int  i = 0; i <= 4; i++ )
            {
                komorka = gtk_cell_renderer_text_new();
                gtk_cell_renderer_set_alignment(komorka,0.5,0.5);
                kolumna = gtk_tree_view_column_new_with_attributes( nazwy_kol_magazynu[i], komorka, "text", i, NULL );
                gtk_tree_view_append_column( GTK_TREE_VIEW( tabela_pracownikow ), kolumna );
                delete komorka;
                delete kolumna;
            }
        }
    }

    magazyn_godzin_pracy = gtk_list_store_new(KOLUMNY_GODZIN,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_INT);
    tabela_godzin = gtk_tree_view_new();
    gtk_tree_view_set_model(GTK_TREE_VIEW(tabela_godzin), GTK_TREE_MODEL(magazyn_godzin_pracy));
    if((connect = mysql_real_connect(connect, "127.0.0.1","root","","sklep_ksiazek",0,NULL,0)) == NULL)
    {
    }
    else{
        std::string sentence = "SELECT Poniedziałek,Wtorek,Środa,Czwartek,Piątek FROM `dni_pracy` WHERE ID_Pracownika = '1'";
        mysql_query(connect,sentence.c_str());
        MYSQL_RES* idZapytania = mysql_store_result(connect);
        MYSQL_ROW row;
        GtkTreeIter iter;
        int j=0;
        row = mysql_fetch_row(idZapytania);
        std::string godzina;
        while(j<=4)
        {
            gtk_list_store_append(magazyn_godzin_pracy,&iter);
            godzina = row[j];
            if(godzina=="10-18") gtk_list_store_set(magazyn_godzin_pracy, &iter,DZIEN_PRACY,dni_tygodnia[j],GODZINY_PIERWSZE,row[j],GODZINY_DRUGIE,"-", - 1 );
            else if(godzina=="13-21") gtk_list_store_set(magazyn_godzin_pracy, &iter,DZIEN_PRACY,dni_tygodnia[j],GODZINY_PIERWSZE,"-",GODZINY_DRUGIE,row[j], - 1 );
            j++;
        }

        GtkTreeViewColumn *kolumna;
        GtkCellRenderer *komorka;
        komorka = gtk_cell_renderer_text_new();
        gtk_cell_renderer_set_alignment(komorka,0.5,0.5);
        g_object_set( komorka, "editable", TRUE, NULL );
        g_signal_connect(komorka, "edited", (GCallback)C_Zakladka_Employee::zmiana_komorki, this);

        for(int  i = 0; i <= 2; i++ ){
            kolumna = gtk_tree_view_column_new_with_attributes( dni_pracy[i], komorka, "text", i, NULL );
            gtk_tree_view_append_column( GTK_TREE_VIEW( tabela_godzin ), kolumna );
            g_free(kolumna);
        }
        g_free(komorka);
    }

    this->kalendarz = gtk_calendar_new();
    g_signal_connect(this->kalendarz, "day-selected",G_CALLBACK(&C_Zakladka_Employee::wypelnianie_rozpiski), this);

    magazyn_godzin_pracy_pracownikow = gtk_list_store_new(KOLUMNY_PRAC,G_TYPE_INT,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_STRING,G_TYPE_INT);
}

void C_Zakladka_Employee::run(GtkWidget *target, gpointer arguments)
{
    Shop *temp = static_cast<Shop*>(arguments);
    if(temp->get_active_button()==temp->get_BtnDostepnychKsiazek())
    {
        temp->usun_widzety_dostepnych_ksiazek();
    }
    else if(temp->get_active_button()==temp->get_BtnZamowien())
    {

    }
    temp->set_ActiveButton(temp->get_BtnPracownikow());
    gtk_table_attach_defaults(GTK_TABLE(temp->zakladka_employee->box_glowny),GTK_WIDGET(temp->zakladka_employee->scr_kontener_pracownicy),2,6,2,7);
    gtk_table_attach_defaults(GTK_TABLE(temp->zakladka_employee->box_glowny),GTK_WIDGET(temp->zakladka_employee->tabela_godzin),7,9,2,4);
    gtk_table_attach_defaults(GTK_TABLE(temp->zakladka_employee->box_glowny),GTK_WIDGET(temp->zakladka_employee->kalendarz),7,10,5,7);
    gtk_widget_show_all(temp->zakladka_employee->okno_glowne);
}

void C_Zakladka_Employee::remove_employee_widgets()
{
    gtk_container_remove(GTK_CONTAINER(box_glowny),scr_kontener_pracownicy);
}

void C_Zakladka_Employee::zmiana_komorki(GtkTreeView * treeview, GtkTreePath * path, GtkTreeViewColumn * col, gpointer arguments)
{
    C_Zakladka_Employee* temp = static_cast<C_Zakladka_Employee*>(arguments);
}

void C_Zakladka_Employee::wypelnianie_rozpiski(GtkWidget *target, gpointer arguments)
{
    C_Zakladka_Employee* temp = static_cast<C_Zakladka_Employee*>(arguments);

    guint* year;
    guint* month;
    guint* day;
    gtk_calendar_get_date(GTK_CALENDAR(temp->kalendarz),year,month,day);
    std::cout<<POINTER_TO

}
