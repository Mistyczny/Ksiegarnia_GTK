#include "M_Dialog_pracownik.h"

M_Dialog_pracownik::M_Dialog_pracownik()
{
    baza = new Baza_danych();
    message = gtk_dialog_new_with_buttons("Message",NULL,GTK_DIALOG_DESTROY_WITH_PARENT,"_ACCEPT", GTK_BUTTONS_OK, "_CANCEL",GTK_BUTTONS_CANCEL,NULL);
    GtkWidget* content_area;
    content_area = gtk_dialog_get_content_area(GTK_DIALOG(message));

    tabela = gtk_table_new(11, 2, TRUE);
    gtk_table_set_row_spacings(GTK_TABLE(tabela), 2);
    gtk_table_set_col_spacings(GTK_TABLE(tabela), 2);

    gtk_container_add(GTK_CONTAINER(content_area),tabela);
    ///DOdawanie nagłówka
    L_naglowek = gtk_label_new("Dodawanie nowego pracownika");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_naglowek, 0, 2, 0, 1);

    ///Dodawanie Label Imie i nazwisko
    L_imie_i_nazwisko = gtk_label_new("Imie i nazwisko:");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_imie_i_nazwisko, 0, 1, 1, 2);
    ///Dodawanie Entry na imie
    E_imie_i_nazwisko = gtk_entry_new();
    gtk_table_attach_defaults(GTK_TABLE(tabela), E_imie_i_nazwisko, 1, 2,1,2);

    ///Dodanie Label miasto zamieszkania
    L_miasto_zamieszkania = gtk_label_new("Miasto zamieszakania:");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_miasto_zamieszkania, 0, 1,2,3);
    ///Dodanie Entry na zamieszkanie
    E_miasto_zamieszkania = gtk_entry_new();
    gtk_table_attach_defaults(GTK_TABLE(tabela), E_miasto_zamieszkania, 1, 2,2,3);

    ///Dodanie Label Ulica i numer mieszkania
    L_adres_zamieszkania = gtk_label_new("Ulica i numer mieszkania:");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_adres_zamieszkania, 0, 1,3,4);
    ///Dodanie Entry na Ulice i numer mieszkania
    E_adres_zamieszkania = gtk_entry_new();
    gtk_table_attach_defaults(GTK_TABLE(tabela), E_adres_zamieszkania, 1, 2,3,4);

    ///Dodanie Label Ulica i numer mieszkania
    L_kod_pocztowy = gtk_label_new("Kod Pocztowy:");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_kod_pocztowy, 0, 1,4,5);
    ///Dodanie Entry na Ulice i numer mieszkania
    E_kod_pocztowy = gtk_entry_new();
    gtk_table_attach_defaults(GTK_TABLE(tabela), E_kod_pocztowy, 1, 2,4,5);

    ///Dodanie Label email
    L_email = gtk_label_new("Adres e-mail:");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_email, 0, 1,5,6);
    ///Dodanie Entry na email
    E_email = gtk_entry_new();
    gtk_table_attach_defaults(GTK_TABLE(tabela), E_email, 1, 2,5,6);

    ///Dodanie Label email
    L_tel = gtk_label_new("Nr Telefonu:");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_tel, 0, 1,6,7);
    ///Dodanie Entry na email
    E_tel = gtk_entry_new();
    gtk_table_attach_defaults(GTK_TABLE(tabela), E_tel, 1, 2,6,7);

    ///Dodanie Label administator
    L_administrator = gtk_label_new("Prawa Administatora(TAK/NIE):");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_administrator, 0, 1,7,8);
    ///Dodanie Entry administrator
    E_administrator = gtk_entry_new();
    gtk_table_attach_defaults(GTK_TABLE(tabela), E_administrator, 1, 2,7,8);

    ///Dodanie Label login
    L_login = gtk_label_new("Login:");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_login, 0, 1,8,9);
    ///Dodanie Entry login
    E_login = gtk_entry_new();
    gtk_table_attach_defaults(GTK_TABLE(tabela), E_login, 1, 2,8,9);

    ///Dodanie Label hasło
    L_haslo = gtk_label_new("Hasło:");
    gtk_table_attach_defaults(GTK_TABLE(tabela), L_haslo, 0, 1,9,10);
    ///Dodanie Entry hasło
    E_haslo = gtk_entry_new();
    gtk_table_attach_defaults(GTK_TABLE(tabela), E_haslo, 1, 2,9,10);

    InfoAboutWrongData= gtk_label_new("");
    gtk_table_attach_defaults(GTK_TABLE(tabela),InfoAboutWrongData, 0, 2,10,11);

    gtk_widget_show_all(message);
}

M_Dialog_pracownik::~M_Dialog_pracownik()
{
    delete baza;
}

std::string M_Dialog_pracownik::sprawdz_czy_dane_poprawne(std::string imie_nazwisko,std::string kod_pocztowy,std::string e_mail,std::string nr_tel,std::string login)
{
    std::regex wzorzec("([a-zA-Z]+)\\s([a-zA-Z]+)");
    if(!regex_match(imie_nazwisko,wzorzec))
    {
        return "Podaj poprawne imie i nazwisko";
    }

    wzorzec.assign("[[:digit:]]{2}\\-[[:digit:]]{3}");
    if(!regex_match(kod_pocztowy,wzorzec))
    {
        return "Niepoprawny format kodu pocztowego";
    }

    wzorzec.assign("[[:digit:]]{9}");
    if(!regex_match(nr_tel,wzorzec))
    {
        return "Niepoprawny format kodu pocztowego";
    }
    wzorzec.assign("([a-zA-Z]+)\\@\\.([a-zA-Z]+)")
    if(!regex_match(e_mail,wzorzec))
    {
        return "Niepoprawny adres e-mail";
    }
    if(nr_tel.length()!=9)
    {
        return "Podaj poprawny nr_tel";
    }
    std::string zapytanie="SELECT pracownicy.ID_Pracownika from pracownicy WHERE pracownicy.Login='"+login+"';";
    MYSQL_RES* result = baza->wyslij_zapytanie(zapytanie);
    MYSQL_ROW row;
    row = mysql_fetch_row(result);
    mysql_free_result(result);
    if(row!=NULL)
    {
        return "Ten login jest zajety";
    }
return "OK";
}

bool M_Dialog_pracownik::przetworz_dane()
{
    std::string Imie_i_nazwisko = static_cast<std::string>(gtk_entry_get_text(GTK_ENTRY(E_imie_i_nazwisko)));
    std::string A_email = static_cast<std::string>(gtk_entry_get_text(GTK_ENTRY(E_email)));
    std::string nr_tel = static_cast<std::string>(gtk_entry_get_text(GTK_ENTRY(E_tel)));
    std::string login = static_cast<std::string>(gtk_entry_get_text(GTK_ENTRY(E_login)));
    std::string kod_pocztowy = static_cast<std::string>(gtk_entry_get_text(GTK_ENTRY(E_kod_pocztowy)));

    std::string sprawdzenie = sprawdz_czy_dane_poprawne(Imie_i_nazwisko,kod_pocztowy,A_email,nr_tel,login);
    if(sprawdzenie=="OK")
    {
        zapisz_informacje(Imie_i_nazwisko,A_email,nr_tel,login);
        return true;
    }
    else
    {
        gtk_label_set_text(GTK_LABEL(InfoAboutWrongData),sprawdzenie.c_str());
        return false;
    }
}

void M_Dialog_pracownik::nowy_pracownik()
{
    while(1)
    {
        switch(gtk_dialog_run(GTK_DIALOG(message)))
        {
            case 1:
                {
                    if(przetworz_dane()==true)
                    {
                        break;
                    }
                    else continue;
                }
            case 3:
                {
                    break;
                }
            case GTK_RESPONSE_DELETE_EVENT:
                {
                    break;
                }
        }
        break;
    }
    gtk_widget_destroy(message);
}

void M_Dialog_pracownik::zapisz_informacje(std::string imie_nazwisko,std::string e_mail,std::string nr_tel,std::string login)
{
    std::size_t pozycja_spacji = imie_nazwisko.find(' ');
    std::string imie = imie_nazwisko.substr(0,pozycja_spacji-1);
    std::string nazwisko = imie_nazwisko.substr(pozycja_spacji+1);

    std::string admin = static_cast<std::string>(gtk_entry_get_text(GTK_ENTRY(E_administrator)));
    std::string Miasta_zamieszkania = static_cast<std::string>(gtk_entry_get_text(GTK_ENTRY(E_miasto_zamieszkania)));
    std::string Ulica_i_numer = static_cast<std::string>(gtk_entry_get_text(GTK_ENTRY(E_adres_zamieszkania)));
    std::string kod_pocztowy = static_cast<std::string>(gtk_entry_get_text(GTK_ENTRY(E_kod_pocztowy)));

    std::size_t pozycja_cyfr = Ulica_i_numer.find_first_of("1234567890");
    std::string ulica = Ulica_i_numer.substr(0,pozycja_cyfr);
    std::string digits = Ulica_i_numer.substr(pozycja_cyfr);


    std::string adres = "SELECT ID_adresu_zamieszkania FROM adres_zamieszkania WHERE Ulica='"+ulica+"' AND Nr_Domu='"+digits+"'";
    MYSQL_RES* result = baza->wyslij_zapytanie(adres);
    MYSQL_ROW row = mysql_fetch_row(result);
    mysql_free_result(result);
    if(row!=NULL)
    {
        int id_adresu = atoi(row[0]);
        std::cout<<id_adresu<<std::endl;
    }

}
